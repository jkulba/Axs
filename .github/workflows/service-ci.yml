name: Service CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Service/**'
      - '.github/workflows/service-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Service/**'
      - '.github/workflows/service-ci.yml'

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './Service/Service.sln'

jobs:
  build-and-test:
    name: Build and Test Service
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ matrix.configuration }} --no-restore

    - name: Run unit tests
      run: |
        if [ -f "./Service/coverlet.runsettings" ]; then
          echo "Using coverlet.runsettings configuration"
          dotnet test ${{ env.SOLUTION_PATH }} --configuration ${{ matrix.configuration }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage --settings ./Service/coverlet.runsettings
        else
          echo "Running tests without coverlet.runsettings"
          dotnet test ${{ env.SOLUTION_PATH }} --configuration ${{ matrix.configuration }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
        fi

    - name: Install ReportGenerator (Release only)
      if: matrix.configuration == 'Release'
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate human-readable coverage report (Release only)
      if: matrix.configuration == 'Release'
      run: |
        reportgenerator \
          -reports:"coverage/**/coverage.cobertura.xml" \
          -targetdir:"coverage-report" \
          -reporttypes:"Html;HtmlSummary;Badges;TextSummary;MarkdownSummary;Cobertura" \
          -title:"Axs Service Code Coverage Report" \
          -tag:"${{ github.run_number }}-${{ github.sha }}"

    - name: Display coverage summary in console (Release only)
      if: matrix.configuration == 'Release'
      run: |
        echo "=== CODE COVERAGE SUMMARY ==="
        if [ -f "coverage-report/Summary.txt" ]; then
          cat coverage-report/Summary.txt
        else
          echo "Coverage summary not found"
        fi
        echo "================================"

    - name: Upload coverage reports to Codecov
      if: matrix.configuration == 'Release'
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results and coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-and-coverage-results-${{ matrix.configuration }}
        path: |
          ./coverage
          ./coverage-report
          **/TestResults/**/*.xml
          **/TestResults/**/*.trx
        retention-days: 30

    - name: Upload human-readable coverage report (Release only)
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-html
        path: ./coverage-report
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Run security audit
      run: dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive

    - name: Install dotnet-outdated
      run: dotnet tool install --global dotnet-outdated-tool

    - name: Check for outdated packages
      run: dotnet outdated ${{ env.SOLUTION_PATH }}

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Download coverage reports from build job
      uses: actions/download-artifact@v4
      with:
        name: test-and-coverage-results-Release
        path: ./coverage-artifacts

    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate detailed coverage analysis
      run: |
        reportgenerator \
          -reports:"coverage-artifacts/coverage/**/coverage.cobertura.xml" \
          -targetdir:"detailed-coverage" \
          -reporttypes:"Html;HtmlSummary;Badges;TextSummary;MarkdownSummary;JsonSummary;SvgChart" \
          -title:"Axs Service Detailed Coverage Analysis" \
          -tag:"${{ github.run_number }}-${{ github.sha }}" \
          -historydir:"coverage-history"

    - name: Upload coverage reports to Codecov (Free for public repos)
      if: github.event.repository.private == false
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

    - name: Install .NET analyzers
      run: |
        dotnet tool install --global security-scan
        dotnet tool install --global dotnet-outdated-tool

    - name: Run Roslyn analyzers
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --verbosity normal | tee build-analysis.log

    - name: Check code metrics with built-in analyzers
      run: |
        echo "=== Code Analysis Results ===" >> analysis-summary.md
        echo "Build completed with built-in Roslyn analyzers" >> analysis-summary.md
        echo "" >> analysis-summary.md
        echo "### Coverage Report" >> analysis-summary.md
        echo "Detailed coverage reports generated in ./detailed-coverage/" >> analysis-summary.md
        echo "" >> analysis-summary.md
        if [ -f "detailed-coverage/Summary.txt" ]; then
          echo "#### Coverage Summary" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          cat detailed-coverage/Summary.txt >> analysis-summary.md
          echo '```' >> analysis-summary.md
        fi
        echo "" >> analysis-summary.md
        echo "### Security Analysis" >> analysis-summary.md
        dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive >> analysis-summary.md || echo "No vulnerabilities found" >> analysis-summary.md

    - name: Upload detailed coverage and analysis reports
      uses: actions/upload-artifact@v4
      with:
        name: detailed-analysis-reports
        path: |
          detailed-coverage/
          analysis-summary.md
          coverage-history/
        retention-days: 30

    - name: Create coverage summary for PR comment
      if: github.event_name == 'pull_request'
      run: |
        if [ -f "detailed-coverage/Summary.txt" ]; then
          echo "COVERAGE_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "## ðŸ“Š Code Coverage Report" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          cat detailed-coverage/Summary.txt >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "ðŸ“ˆ [View detailed coverage report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "COVERAGE_SUMMARY=## ðŸ“Š Code Coverage Report\n\nCoverage data not available for this run." >> $GITHUB_ENV
        fi

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverageComment = process.env.COVERAGE_SUMMARY || `## ðŸ“Š Code Quality Report

          âœ… Build completed successfully
          âœ… All tests passed
          âœ… Static analysis completed
          âœ… Security scan completed

          ðŸ“ˆ Coverage report available in build artifacts`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageComment
          });

  deployment-ready:
    name: Deployment Ready Check
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build for production
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Publish application
      run: dotnet publish ./Service/src/Api/Api.csproj --configuration Release --no-build --output ./publish

    - name: Upload publish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ./publish
        retention-days: 30
