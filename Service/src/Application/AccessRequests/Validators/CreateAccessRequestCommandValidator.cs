using Application.AccessRequests.Commands;
using FluentValidation;

namespace Application.AccessRequests.Validators;

public class CreateAccessRequestCommandValidator : AbstractValidator<CreateAccessRequestCommand>
{
    public CreateAccessRequestCommandValidator()
    {
        RuleFor(x => x.UserName)
            .NotEmpty()
            .WithMessage("User name is required.")
            .MaximumLength(100)
            .WithMessage("User name cannot exceed 100 characters.")
            .Matches(@"^[a-zA-Z0-9._@-]+$")
            .WithMessage("User name can only contain letters, numbers, dots, underscores, @ symbols, and hyphens.");

        RuleFor(x => x.JobNumber)
            .NotEmpty()
            .WithMessage("Job number is required.")
            .Must(BeValidPositiveInteger)
            .WithMessage("Job number must be a valid positive integer.");

        RuleFor(x => x.RequestCode)
            .Must(BeValidOptionalGuid)
            .WithMessage("Request code must be a valid GUID if provided.");

        RuleFor(x => x.ActivityCode)
            .NotEmpty()
            .WithMessage("Activity code is required.")
            .MaximumLength(50)
            .WithMessage("Activity code cannot exceed 50 characters.");

        RuleFor(x => x.Workstation)
            .NotEmpty()
            .WithMessage("Workstation is required.")
            .MaximumLength(255)
            .WithMessage("Workstation cannot exceed 255 characters.");

        RuleFor(x => x.UtcCreatedAt)
            .Must(BeValidOptionalDateTime)
            .WithMessage("Created date must be a valid date and cannot be in the future (allowing 5 minutes for clock skew) if provided.");
    }

    private static bool BeValidPositiveInteger(int jobNumber)
    {
        return jobNumber > 0;
    }

    private static bool BeValidOptionalGuid(Guid? requestCode)
    {
        // Allow null values - they will be generated by the service
        if (requestCode == null)
            return true;

        // Don't allow empty GUIDs if a value is provided
        return requestCode.Value != Guid.Empty;
    }

    private static bool BeValidOptionalDateTime(DateTime? utcCreatedAt)
    {
        // Allow null values - they will be set to UtcNow by the service
        if (utcCreatedAt == null)
            return true;

        // If a value is provided, ensure it's not in the future (allowing 5 minutes for clock skew)
        return utcCreatedAt.Value <= DateTime.UtcNow.AddMinutes(5);
    }
}
