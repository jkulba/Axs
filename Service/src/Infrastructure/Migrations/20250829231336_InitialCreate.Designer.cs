// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AccessDbContext))]
    [Migration("20250829231336_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Domain.Entities.AccessRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RequestCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UtcCreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Workstation")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.HasIndex("JobNumber");

                    b.HasIndex("RequestCode")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("AccessRequest", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivityCode")
                        .IsUnique();

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Domain.Entities.Authorization", b =>
                {
                    b.Property<int>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByNum")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedByNum")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UtcCreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UtcUpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorizationId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("JobNumber", "UserId", "ActivityId")
                        .IsUnique();

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("Domain.Entities.GroupAuthorization", b =>
                {
                    b.Property<int>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByNum")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedByNum")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UtcCreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UtcUpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorizationId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("GroupId");

                    b.HasIndex("JobNumber", "GroupId", "ActivityId")
                        .IsUnique();

                    b.ToTable("GroupAuthorizations");
                });

            modelBuilder.Entity("Domain.Entities.UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupOwner")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Entities.UserGroupMember", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "UserId");

                    b.ToTable("UserGroupMembers");
                });

            modelBuilder.Entity("Domain.Entities.Authorization", b =>
                {
                    b.HasOne("Domain.Entities.Activity", "Activity")
                        .WithMany("Authorizations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Domain.Entities.GroupAuthorization", b =>
                {
                    b.HasOne("Domain.Entities.Activity", "Activity")
                        .WithMany("GroupAuthorizations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserGroup", "Group")
                        .WithMany("GroupAuthorizations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.Entities.UserGroupMember", b =>
                {
                    b.HasOne("Domain.Entities.UserGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.Entities.Activity", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("GroupAuthorizations");
                });

            modelBuilder.Entity("Domain.Entities.UserGroup", b =>
                {
                    b.Navigation("GroupAuthorizations");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
